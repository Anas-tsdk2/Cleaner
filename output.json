[
  {
    "name": "style.css",
    "content": "/* Variables globales */\n:root {\n    --primary-color: #2196F3;\n    --background-color: #f5f5f5;\n    --text-color: #333;\n    --border-color: #ddd;\n    --error-color: #f44336;\n    --success-color: #4CAF50;\n}\n\n/* Reset basique */\n* {\n    margin: 0;\n    padding: 0;\n    box-sizing: border-box;\n}\n\n/* Styles de base */\nbody {\n    font-family: Arial, sans-serif;\n    line-height: 1.6;\n    background-color: var(--background-color);\n    color: var(--text-color);\n    padding: 20px;\n}\n\n.container {\n    max-width: 1200px;\n    margin: 0 auto;\n    padding: 20px;\n}\n\nh1 {\n    text-align: center;\n    margin-bottom: 30px;\n    color: var(--primary-color);\n}\n\n/* Zone de drop */\n.drop-zone {\n    background: white;\n    border: 2px dashed var(--primary-color);\n    border-radius: 10px;\n    padding: 40px;\n    text-align: center;\n    cursor: pointer;\n    margin-bottom: 20px;\n    transition: all 0.3s ease;\n}\n\n.drop-zone:hover {\n    background: #f8f9fa;\n    border-color: #1976D2;\n}\n\n.drop-zone.drag-over {\n    background: #e3f2fd;\n    border-color: #1976D2;\n}\n\n/* Zone des actions */\n.actions {\n    margin: 20px 0;\n    text-align: center;\n}\n\n/* Style du bouton */\n.button {\n    background-color: var(--primary-color);\n    color: white;\n    border: none;\n    padding: 12px 24px;\n    border-radius: 5px;\n    cursor: pointer;\n    font-size: 16px;\n    display: inline-flex;\n    align-items: center;\n    gap: 8px;\n    transition: all 0.3s ease;\n}\n\n.button:hover {\n    background-color: #1976D2;\n    transform: translateY(-1px);\n    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.2);\n}\n\n.button:active {\n    transform: translateY(0);\n}\n\n.button:disabled {\n    background-color: #ccc;\n    cursor: not-allowed;\n    transform: none;\n    box-shadow: none;\n}\n\n.button-icon {\n    font-size: 20px;\n}\n\n/* Wrapper pour les tableaux */\n/* Modifier la classe tables-wrapper */\n.tables-wrapper {\n    display: grid;\n    grid-template-columns: 1fr 1fr;\n    /* Garde 2 colonnes √©gales */\n    gap: 10px;\n    /* R√©duit l'espace entre les tableaux */\n    margin-top: 20px;\n    width: 98%;\n    /* Utilise presque toute la largeur */\n    max-width: none;\n    /* Enl√®ve la limite de largeur */\n}\n\n/* Ajuster la largeur des tableaux */\n.table-container {\n    width: 100%;\n    overflow-x: auto;\n}\n\n/* Assurer l'alignement des colonnes entre les tableaux */\ntable th,\ntable td {\n    width: auto;\n    /* Largeur automatique bas√©e sur le contenu */\n    white-space: nowrap;\n    /* Emp√™che le retour √† la ligne */\n    min-width: 100px;\n    /* Largeur minimum pour chaque colonne */\n}\n\n/* Ajuster le container principal */\n.container {\n    width: 98%;\n    /* Utilise presque toute la largeur de l'√©cran */\n    max-width: none;\n    margin: 0 auto;\n    padding: 10px;\n}\n\n/* Style du tableau */\ntable {\n    width: 100%;\n    border-collapse: collapse;\n    background: white;\n    box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);\n}\n\nth {\n    background-color: var(--primary-color);\n    color: white;\n    padding: 12px;\n    text-align: left;\n    white-space: nowrap;\n}\n\ntd {\n    padding: 12px;\n    border: 1px solid var(--border-color);\n    text-align: left;\n}\n\ntr:nth-child(even) {\n    background-color: #f8f9fa;\n}\n\n/* Cellules modifi√©es */\n.cell-modified {\n    background-color: #e8f5e9;\n    border-left: 3px solid #4CAF50;\n}\n\n/* Adaptation responsive */\n@media (max-width: 768px) {\n    .tables-wrapper {\n        grid-template-columns: 1fr;\n    }\n}\n\n/* styles token */\n.token-section {\n    margin: 20px auto;\n    max-width: 600px;\n    padding: 15px;\n    background: #ffffff;\n    border-radius: 8px;\n    box-shadow: 0 2px 4px rgba(0,0,0,0.1);\n}\n\n.token-container {\n    display: flex;\n    align-items: center;\n    background: #f8f9fa;\n    border: 2px solid #e9ecef;\n    border-radius: 6px;\n    padding: 8px 12px;\n    transition: all 0.3s ease;\n}\n\n.token-container:focus-within {\n    border-color: var(--primary-color);\n    box-shadow: 0 0 0 3px rgba(33, 150, 243, 0.1);\n}\n\n.token-icon {\n    font-size: 18px;\n    margin-right: 10px;\n    color: #6c757d;\n}\n\n.token-input {\n    flex: 1;\n    border: none;\n    background: transparent;\n    padding: 8px 0;\n    font-size: 14px;\n    color: #495057;\n    font-family: 'Courier New', monospace;\n}\n\n.token-input:focus {\n    outline: none;\n}\n\n.token-input::placeholder {\n    color: #adb5bd;\n}\n\n.token-clear {\n    background: none;\n    border: none;\n    color: #adb5bd;\n    cursor: pointer;\n    font-size: 16px;\n    padding: 4px 8px;\n    transition: color 0.3s ease;\n}\n\n.token-clear:hover {\n    color: #dc3545;\n}\n\n.token-status {\n    margin-top: 8px;\n    font-size: 13px;\n    text-align: center;\n    transition: all 0.3s ease;\n}\n\n.token-status.success {\n    color: #28a745;\n}\n\n.token-status.error {\n    color: #dc3545;\n}",
    "size": 4692,
    "modTime": "2024-12-30T18:56:12.437769487+01:00",
    "path": "css/style.css"
  },
  {
    "name": "index.html",
    "content": "\u003c!DOCTYPE html\u003e\n\u003chtml lang=\"fr\"\u003e\n\n\u003chead\u003e\n    \u003cmeta charset=\"UTF-8\"\u003e\n    \u003cmeta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"\u003e\n    \u003ctitle\u003eCSV Cleaner\u003c/title\u003e\n    \u003clink rel=\"stylesheet\" href=\"css/style.css\"\u003e\n\u003c/head\u003e\n\n\u003cbody\u003e\n    \u003cdiv class=\"container\"\u003e\n        \u003ch1\u003eCORA's Cleaner\u003c/h1\u003e\n\n        \u003cdiv class=\"token-section\"\u003e\n            \u003cdiv class=\"token-container\"\u003e\n                \u003cdiv class=\"token-icon\"\u003eüîë\u003c/div\u003e\n                \u003cinput type=\"password\" id=\"bearerToken\" placeholder=\"Collez votre Bearer Token ici\" class=\"token-input\"\n                    autocomplete=\"off\" /\u003e\n                \u003cbutton id=\"clearToken\" class=\"token-clear\" title=\"Effacer\"\u003e‚úï\u003c/button\u003e\n            \u003c/div\u003e\n            \u003cdiv id=\"tokenStatus\" class=\"token-status\"\u003e\u003c/div\u003e\n        \u003c/div\u003e\n    \u003c/div\u003e\n\n    \u003cdiv class=\"drop-zone\" id=\"dropZone\"\u003e\n        \u003cp\u003eGlissez votre fichier CSV-UTF8 ici\u003c/p\u003e\n        \u003cinput type=\"file\" id=\"fileInput\" accept=\".csv\" hidden\u003e\n    \u003c/div\u003e\n\n    \u003cdiv class=\"actions\"\u003e\n        \u003cbutton id=\"cleanButton\" class=\"button\" disabled\u003e\n            \u003cspan class=\"button-icon\"\u003eüßπ\u003c/span\u003e\n            Nettoyer les donn√©es\n        \u003c/button\u003e\n    \u003c/div\u003e\n\n    \u003cdiv class=\"tables-wrapper\"\u003e\n        \u003cdiv class=\"table-container\"\u003e\n            \u003ctable id=\"previewTable\"\u003e\u003c/table\u003e\n        \u003c/div\u003e\n        \u003cdiv class=\"table-container\"\u003e\n            \u003ctable id=\"resultTable\"\u003e\u003c/table\u003e\n        \u003c/div\u003e\n    \u003c/div\u003e\n    \u003c/div\u003e\n\n    \u003c!-- Charger les scripts dans le bon ordre --\u003e\n    \u003cscript src=\"js/security.js\"\u003e\u003c/script\u003e\n    \u003cscript src=\"js/tokenManager.js\"\u003e\u003c/script\u003e\n    \u003cscript src=\"js/dragonflyAPI.js\"\u003e\u003c/script\u003e\n    \u003cscript src=\"js/app.js\"\u003e\u003c/script\u003e\n\u003c/body\u003e\n\n\u003c/html\u003e",
    "size": 1649,
    "modTime": "2024-12-30T23:21:53.377547785+01:00",
    "path": "index.html"
  },
  {
    "name": "app.js",
    "content": "// Configuration du mode debug\nconst DEBUG = true; // √Ä mettre √† false en production\nconst VALID_MIME_TYPES = ['text/csv', 'application/vnd.ms-excel'];\nconst MAX_FILE_SIZE = 5 * 1024 * 1024; // 5MB en bytes\nconst ERROR_MESSAGES = {\n    invalidType: 'Format de fichier invalide. Veuillez s√©lectionner un fichier CSV.',\n    tooLarge: 'Fichier trop volumineux. La taille maximum est de 5MB.',\n    noFile: 'Aucun fichier s√©lectionn√©.',\n    parseError: 'Erreur lors de la lecture du fichier CSV.'\n};\n\n// √âtat de l'application\nconst state = {\n    currentFile: null,\n    originalData: null,\n    cleanedData: null\n};\n\nconst dragonflyAPI = new DragonflyAPI();\n\n\n// Initialisation\ndocument.addEventListener('DOMContentLoaded', () =\u003e {\n    SecurityLogger.log('Application initialis√©e');\n    initializeDropZone();\n    initializeCleanButton();\n});\n\n// Initialisation de la zone de drop\nfunction initializeDropZone() {\n    const dropZone = document.getElementById('dropZone');\n    const fileInput = document.getElementById('fileInput');\n\n    // Gestion du clic sur la zone\n    dropZone.addEventListener('click', () =\u003e fileInput.click());\n\n    // Gestion du drag \u0026 drop\n    dropZone.addEventListener('dragover', (e) =\u003e {\n        e.preventDefault();\n        dropZone.classList.add('drag-over');\n    });\n\n    dropZone.addEventListener('dragleave', () =\u003e {\n        dropZone.classList.remove('drag-over');\n    });\n\n    dropZone.addEventListener('drop', (e) =\u003e {\n        e.preventDefault();\n        dropZone.classList.remove('drag-over');\n        \n        const file = e.dataTransfer.files[0];\n        if (file) handleFile(file);\n    });\n\n    // Gestion de la s√©lection de fichier\n    fileInput.addEventListener('change', (e) =\u003e {\n        const file = e.target.files[0];\n        if (file) handleFile(file);\n    });\n}\n\n// Initialisation du bouton de nettoyage\nfunction initializeCleanButton() {\n    const cleanButton = document.getElementById('cleanButton');\n    cleanButton.addEventListener('click', handleCleanData);\n    cleanButton.disabled = true; // D√©sactiv√© par d√©faut\n}\n\n// Gestion s√©curis√©e du fichier\nfunction handleFile(file) {\n    // Logging de s√©curit√©\n    SecurityLogger.log('Tentative de chargement de fichier', { \n        name: file.name, \n        size: file.size, \n        type: file.type \n    });\n\n    // Validation du fichier\n    try {\n        if (!file) {\n            throw new Error(ERROR_MESSAGES.noFile);\n        }\n\n        if (file.size \u003e MAX_FILE_SIZE) {\n            throw new Error(ERROR_MESSAGES.tooLarge);\n        }\n\n        if (!VALID_MIME_TYPES.includes(file.type) \u0026\u0026 !file.name.endsWith('.csv')) {\n            throw new Error(ERROR_MESSAGES.invalidType);\n        }\n\n        const reader = new FileReader();\n        reader.onload = (e) =\u003e {\n            try {\n                SecurityLogger.log('Lecture du fichier r√©ussie');\n                parseCSV(sanitizeContent(e.target.result));\n            } catch (error) {\n                SecurityLogger.error('Erreur parsing CSV', error);\n                showError(ERROR_MESSAGES.parseError);\n            }\n        };\n\n        reader.onerror = (error) =\u003e {\n            SecurityLogger.error('Erreur lecture fichier', error);\n            showError(ERROR_MESSAGES.parseError);\n        };\n\n        reader.readAsText(file, 'UTF-8');\n\n    } catch (error) {\n        SecurityLogger.error('Erreur validation fichier', error);\n        showError(error.message);\n    }\n}\n\n\n// Fonction s√©curis√©e de parsing CSV\nfunction parseCSV(content) {\n    try {\n        // Sanitize le contenu avant parsing\n        content = sanitizeContent(content);\n        \n        // Divise le contenu en lignes\n        const lines = content.split('\\n');\n        if (lines.length === 0) {\n            SecurityLogger.error('Fichier CSV vide');\n            return;\n        }\n\n        // D√©tecte le s√©parateur (virgule ou point-virgule)\n        const separator = lines[0].includes(';') ? ';' : ',';\n\n        // Parse les donn√©es\n        const headers = lines[0].split(separator);\n        const rows = lines.slice(1)\n            .filter(line =\u003e line.trim() !== '')\n            .map(line =\u003e line.split(separator));\n\n        // V√©rifie la coh√©rence des donn√©es\n        if (!validateCSVStructure(headers, rows)) {\n            SecurityLogger.error('Structure CSV invalide');\n            alert('Le fichier CSV semble mal format√©');\n            return;\n        }\n\n        // Stocke les donn√©es originales\n        state.originalData = {\n            headers: headers,\n            rows: rows\n        };\n\n        SecurityLogger.log('Parsing CSV r√©ussi', { \n            rowCount: rows.length,\n            headerCount: headers.length \n        });\n\n        // Active le bouton de nettoyage\n        document.getElementById('cleanButton').disabled = false;\n\n        // Affiche les donn√©es\n        displayPreview(headers, rows);\n    } catch (error) {\n        SecurityLogger.error('Erreur lors du parsing CSV', error);\n        alert('Erreur lors de la lecture du fichier CSV');\n    }\n}\n\n// Nouvelle fonction de sanitization\nfunction sanitizeContent(content) {\n    return content\n        .replace(/[\u003c\u003e]/g, '') // Anti-XSS basique\n        .replace(/[\\x00-\\x08\\x0B\\x0C\\x0E-\\x1F\\x7F-\\x9F]/g, '') // Supprime les caract√®res de contr√¥le\n        .trim();\n}\n\n\n// Nouvelle fonction de validation\nfunction validateCSVStructure(headers, rows) {\n    if (!headers.length) return false;\n    const headerCount = headers.length;\n    return rows.every(row =\u003e row.length === headerCount);\n}\n\n// Le reste de votre code reste inchang√©...\nfunction displayPreview(headers, rows) {\n    const table = document.getElementById('previewTable');\n    table.innerHTML = '';\n\n    // Cr√©e l'en-t√™te\n    const thead = document.createElement('thead');\n    const headerRow = document.createElement('tr');\n    headers.forEach(header =\u003e {\n        const th = document.createElement('th');\n        th.textContent = sanitizeCell(header.trim() || '-');\n        headerRow.appendChild(th);\n    });\n    thead.appendChild(headerRow);\n    table.appendChild(thead);\n\n    // Cr√©e le corps du tableau\n    const tbody = document.createElement('tbody');\n    rows.forEach(row =\u003e {\n        const tr = document.createElement('tr');\n        row.forEach(cell =\u003e {\n            const td = document.createElement('td');\n            td.textContent = sanitizeCell(cell.trim() || '-');\n            tr.appendChild(td);\n        });\n        tbody.appendChild(tr);\n    });\n    table.appendChild(tbody);\n}\n\n// Nouvelle fonction de sanitization des cellules\nfunction sanitizeCell(value) {\n    return value\n        .replace(/[\u003c\u003e]/g, '')\n        .trim();\n}\n\n// Le reste des fonctions de nettoyage...\nasync function handleCleanData() {\n    console.log(\"üöÄ D√©but du nettoyage\");\n    if (!state.originalData) {\n        console.warn('Pas de donn√©es √† nettoyer');\n        return;\n    }\n\n    try {\n        const cleanButton = document.getElementById('cleanButton');\n        cleanButton.disabled = true;\n\n        console.log(\"üìä Donn√©es originales:\", state.originalData);\n\n        const cleanedRows = [];\n        for (let row of state.originalData.rows) {\n            console.log(\"üîÑ Traitement ligne:\", row);\n            \n            // D'abord nettoyer tous les champs sauf civilit√©\n            const tempRow = [''];  // Place vide pour la civilit√©\n            for(let i = 1; i \u003c row.length; i++) {\n                const cleanedCell = await cleanCell(row[i], i, state.originalData.headers, row);\n                tempRow.push(cleanedCell);\n            }\n            \n            // PUIS traiter la civilit√© avec le contexte nettoy√©\n            console.log(\"üëî Traitement civilit√© avec contexte nettoy√©:\", tempRow);\n            const civilite = await cleanCell('', 0, state.originalData.headers, tempRow);\n            console.log(\"üëî Civilit√© d√©termin√©e:\", civilite);\n            \n            tempRow[0] = civilite;\n            cleanedRows.push(tempRow);\n\n            // Mise √† jour progressive\n            state.cleanedData = {\n                headers: state.originalData.headers,\n                rows: cleanedRows\n            };\n            displayCleanedData(state.cleanedData.headers, state.cleanedData.rows);\n        }\n\n    } catch (error) {\n        console.error('‚ùå Erreur lors du nettoyage:', error);\n        alert('Une erreur est survenue lors du nettoyage des donn√©es');\n    } finally {\n        cleanButton.disabled = false;\n    }\n}\n\n// Fonction de nettoyage d'une cellule\nasync function cleanCell(cell, columnIndex, headers, currentRow) {\n    try {\n        // Ignorer la derni√®re colonne si elle est vide et sans nom\n        if (columnIndex === headers.length - 1 \u0026\u0026 \n            (!headers[columnIndex] || headers[columnIndex].trim() === '') \u0026\u0026 \n            (!cell || cell.trim() === '')) {\n            return '';\n        }\n\n        console.log(\"üîç cleanCell appel√© avec:\", {\n            cell: cell,\n            columnIndex: columnIndex,\n            headerName: headers[columnIndex],\n            currentRow: currentRow\n        });\n        \n        const columnName = headers[columnIndex]?.trim().toLowerCase();\n        console.log(\"üìù Appel API pour:\", columnName);\n        \n        const cleanedValue = await dragonflyAPI.processCell(cell, columnName, currentRow);\n        console.log(\"‚úÖ R√©ponse API:\", cleanedValue);\n        \n        return cleanedValue || cell;\n    } catch (error) {\n        console.error(\"‚ùå Erreur dans cleanCell:\", error);\n        return cell;\n    }\n}\n\nfunction normalizeCivility(value) {\n    value = value.toLowerCase().trim();\n    if (value.includes('m.') || value.includes('mr') || value.includes('monsieur')) return 'Monsieur';\n    if (value.includes('mme') || value.includes('madame')) return 'Madame';\n    return value;\n}\n\nfunction normalizeNameCase(value) {\n    return value.replace(/\\s+/g, ' ')\n                .trim()\n                .split(' ')\n                .map(word =\u003e word.charAt(0).toUpperCase() + word.slice(1).toLowerCase())\n                .join(' ');\n}\n\nfunction cleanEmail(value) {\n    if (!value.includes('@') || !value.includes('.')) return '-';\n    return value.toLowerCase().trim().replace(/\\s+/g, '');\n}\n\nfunction formatPhoneNumber(value) {\n    // Garde uniquement les chiffres\n    let numbers = value.replace(/\\D/g, '');\n    if (numbers.length !== 10) return value;\n    \n    // Format XX XX XX XX XX\n    return numbers.replace(/(\\d{2})(\\d{2})(\\d{2})(\\d{2})(\\d{2})/, '$1 $2 $3 $4 $5');\n}\n\nfunction cleanFunction(value) {\n    return value\n        .replace(/\\s+/g, ' ')\n        .replace(/\\/.*$/, '') // Supprime tout apr√®s un /\n        .replace(/\\(.*\\)/, '') // Supprime les parenth√®ses et leur contenu\n        .trim();\n}\n\n// Affiche les donn√©es nettoy√©es\nfunction displayCleanedData(headers, rows) {\n    const resultTable = document.getElementById('resultTable');\n    resultTable.innerHTML = '';\n\n    // Cr√©e l'en-t√™te\n    const thead = document.createElement('thead');\n    const headerRow = document.createElement('tr');\n    headers.forEach(header =\u003e {\n        const th = document.createElement('th');\n        th.textContent = header.trim() || '-';\n        headerRow.appendChild(th);\n    });\n    thead.appendChild(headerRow);\n    resultTable.appendChild(thead);\n\n    // Cr√©e le corps du tableau\n    const tbody = document.createElement('tbody');\n    rows.forEach((row, rowIndex) =\u003e {\n        const tr = document.createElement('tr');\n        row.forEach((cell, cellIndex) =\u003e {\n            const td = document.createElement('td');\n            const originalCell = state.originalData.rows[rowIndex][cellIndex];\n            td.textContent = cell || '-';\n            \n            if (cell !== originalCell) {\n                td.classList.add('cell-modified');\n                td.title = `Original: \"${originalCell}\"`;\n            }\n            \n            tr.appendChild(td);\n        });\n        tbody.appendChild(tr);\n    });\n    resultTable.appendChild(tbody);\n}\n\nfunction showError(message) {\n    // Vous pouvez adapter l'affichage selon votre interface\n    alert(message);\n}\n\nfunction initializeTokenInput() {\n    const tokenInput = document.getElementById('bearerToken');\n    const tokenStatus = document.getElementById('tokenStatus');\n    const clearButton = document.getElementById('clearToken');\n\n    // G√©rer la saisie du token\n    tokenInput.addEventListener('change', (e) =\u003e {\n        const token = e.target.value.trim();\n        if (TokenManager.store(token)) {\n            tokenStatus.textContent = 'Bearer Token enregistr√© ‚úì';\n            tokenStatus.className = 'token-status success';\n            SecurityLogger.log('Token enregistr√© avec succ√®s');\n        } else {\n            tokenStatus.textContent = 'Token invalide ‚úó';\n            tokenStatus.className = 'token-status error';\n            SecurityLogger.warn('Token invalide');\n        }\n    });\n\n    // G√©rer le bouton d'effacement\n    clearButton.addEventListener('click', () =\u003e {\n        tokenInput.value = '';\n        TokenManager.clear();\n        tokenStatus.textContent = 'Token effac√©';\n        tokenStatus.className = 'token-status';\n        SecurityLogger.log('Token effac√©');\n    });\n\n    // Restaurer le token s'il existe\n    const savedToken = TokenManager.get();\n    if (savedToken) {\n        tokenInput.value = savedToken;\n        tokenStatus.textContent = 'Bearer Token restaur√© ‚úì';\n        tokenStatus.className = 'token-status success';\n    }\n}\n\n// Ajouter l'appel dans le DOMContentLoaded\n// app.js\ndocument.addEventListener('DOMContentLoaded', () =\u003e {\n    // V√©rifions que tous les √©l√©ments existent avant d'initialiser\n    const tokenInput = document.getElementById('bearerToken');\n    const tokenStatus = document.getElementById('tokenStatus');\n    const clearButton = document.getElementById('clearToken');\n    \n    if (!tokenInput || !tokenStatus || !clearButton) {\n        console.error('√âl√©ments du token non trouv√©s dans le DOM');\n        return;\n    }\n\n    // Fonction d'initialisation du token\n    function initializeTokenInput() {\n        // G√©rer la saisie du token\n        tokenInput.addEventListener('change', (e) =\u003e {\n            const token = e.target.value.trim();\n            if (TokenManager.store(token)) {\n                tokenStatus.textContent = 'Bearer Token enregistr√© ‚úì';\n                tokenStatus.className = 'token-status success';\n                SecurityLogger.log('Token enregistr√© avec succ√®s');\n            } else {\n                tokenStatus.textContent = 'Token invalide ‚úó';\n                tokenStatus.className = 'token-status error';\n                SecurityLogger.warn('Token invalide');\n            }\n        });\n\n        // G√©rer le bouton d'effacement\n        clearButton.addEventListener('click', () =\u003e {\n            tokenInput.value = '';\n            TokenManager.clear();\n            tokenStatus.textContent = 'Token effac√©';\n            tokenStatus.className = 'token-status';\n            SecurityLogger.log('Token effac√©');\n        });\n\n        // Restaurer le token s'il existe\n        const savedToken = TokenManager.get();\n        if (savedToken) {\n            tokenInput.value = savedToken;\n            tokenStatus.textContent = 'Bearer Token restaur√© ‚úì';\n            tokenStatus.className = 'token-status success';\n        }\n    }\n\n    // Initialiser dans cet ordre\n    initializeTokenInput();\n    initializeDropZone();\n    initializeCleanButton();\n});",
    "size": 15380,
    "modTime": "2024-12-31T11:39:09.874193776+01:00",
    "path": "js/app.js"
  },
  {
    "name": "dragonflyAPI.js",
    "content": "/**\n * Client API pour communiquer avec Dragonfly API\n */\nclass DragonflyAPI {\n    constructor() {\n        this.baseUrl = 'https://ai.dragonflygroup.fr/api/v1';\n        this.assistantId = 'asst_1f1UeJGMURpenLfrj4Aaykyp';\n        this.currentRow = null; // Pour stocker la ligne en cours\n    }\n\n    /**\n     * Change l'ID de l'assistant utilis√©\n     */\n    setAssistantId(id) {\n        this.assistantId = id;\n    }\n\n    /**\n     * V√©rifie si un token est valide en essayant de r√©cup√©rer les assistants\n     */\n    async validateToken(token) {\n        try {\n            const response = await fetch(`${this.baseUrl}/user/assistants`, {\n                method: 'GET',\n                headers: {\n                    'Authorization': `Bearer ${token}`\n                }\n            });\n            return response.ok;\n        } catch (error) {\n            console.error('Erreur validation token:', error);\n            return false;\n        }\n    }\n\n    /**\n     * R√©cup√®re la liste des assistants disponibles\n     */\n    async getAssistants() {\n        const token = TokenManager.get();\n        if (!token) throw new Error('Token manquant');\n\n        const response = await fetch(`${this.baseUrl}/user/assistants`, {\n            method: 'GET',\n            headers: {\n                'Authorization': `Bearer ${token}`\n            }\n        });\n\n        if (!response.ok) throw new Error('Erreur r√©cup√©ration assistants');\n        return await response.json();\n    }\n\n    /**\n     * Lit et concat√®ne les donn√©es d'un stream\n     */\n    async readStream(reader) {\n        let result = '';\n        const decoder = new TextDecoder();\n\n        try {\n            while (true) {\n                const { value, done } = await reader.read();\n                if (done) break;\n\n                const chunk = decoder.decode(value);\n                //console.log(\"Chunk re√ßu:\", chunk); // Debug\n\n                // S√©pare les lignes et traite chaque ligne\n                const lines = chunk.split('\\n');\n                for (const line of lines) {\n                    if (line.trim().startsWith('data:')) {\n                        const jsonStr = line.replace('data:', '').trim();\n                        if (jsonStr === '[DONE]') continue;\n\n                        try {\n                            const parsed = JSON.parse(jsonStr);\n                            if (parsed.choices?.[0]?.delta?.content) {\n                                result += parsed.choices[0].delta.content;\n                            } else if (parsed.choices?.[0]?.message?.content) {\n                                result += parsed.choices[0].message.content;\n                            }\n                        } catch (e) {\n                            // Ignore les erreurs de parsing JSON pour les lignes incompl√®tes\n                            if (jsonStr.trim()) {\n                                console.debug('Ligne non parsable:', jsonStr);\n                            }\n                        }\n                    }\n                }\n            }\n        } catch (error) {\n            console.error('Erreur lecture stream:', error);\n        }\n\n        // Nettoyage final\n        result = result.trim();\n        console.log(\"R√©sultat final:\", result); // Debug\n\n        return result;\n    }\n\n    /**\n     * Traite une ligne de donn√©es via l'API\n     */\n    async processRow(rowData) {\n        // Stocker la ligne courante si disponible\n        if (rowData.fullRow) {\n            this.currentRow = rowData.fullRow;\n        }\n\n        const token = TokenManager.get();\n        if (!token) throw new Error('Token manquant');\n\n        const response = await fetch(`${this.baseUrl}/chat/completions`, {\n            method: 'POST',\n            headers: {\n                'Authorization': `Bearer ${token}`,\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify({\n                messages: [{\n                    role: \"user\",\n                    content: [{\n                        type: \"text\",\n                        text: rowData.prompt || `Nettoie cette donn√©e de type ${rowData.type}: \"${rowData.value}\"`\n                    }]\n                }],\n                assistantId: this.assistantId,\n                temperature: 1,\n                stream: true,\n                stream_options: {\n                    include_usage: true,\n                    continuous_usage_stats: false\n                }\n            })\n        });\n\n        if (!response.ok) {\n            const error = await response.json().catch(() =\u003e ({}));\n            throw new Error(`Erreur API: ${response.status} ${error.message || ''}`);\n        }\n\n        // Lecture du stream\n        const reader = response.body.getReader();\n        const result = await this.readStream(reader);\n\n        // On retourne un objet qui imite la structure de r√©ponse non-stream√©e\n        return {\n            choices: [{\n                message: {\n                    content: result\n                }\n            }]\n        };\n    }\n\n    /**\n     * Traite une cellule unique\n     */\n    async processCell(value, type, currentRow) {\n        try {\n            // Construire le contexte\n            const context = currentRow ? {\n                civilite: currentRow[0] || '',\n                prenom: currentRow[1] || '',\n                nom: currentRow[2] || '',\n                nom_complet: currentRow[3] || '',\n                fonction: currentRow[4] || '',\n                email: currentRow[5] || '',\n                organisation: currentRow[6] || '',\n                telephone: currentRow[7] || ''\n            } : {};\n    \n            // Construction du prompt\n            const prompt = `\nYou are an AI assistant specialized in data cleaning and normalization for CSV datasets containing personal and professional information. Your task is to process each cell in the dataset, applying appropriate cleaning rules and standardizations.\n\nHere is the CSV data you will be working with:\n\n\u003cdata_type\u003e ${type}\u003c/data_type\u003e\n\u003cinput_value\u003e${value}\u003c/input_value\u003e\n\u003cadditional_context\u003e${JSON.stringify(context, null, 2)}\u003c/additional_context\u003e\n\nInstructions:\n\n1. Analyze each row in the dataset as a whole, considering the context and relationships between cells.\n\n2. Before processing individual cells, wrap your analysis in \u003crow_analysis\u003e tags. In this analysis:\n   - List out the content of each cell in the row.\n   - Identify the cell type (e.g., Civilit√©, Pr√©nom, Nom, etc.) for each cell and its corresponding cleaning rules.\n   - Note any inconsistencies or potential data quality issues within the row.\n   - Identify any relationships between fields (e.g., email and name) that might inform your decisions.\n   - If any name or full name fields are empty, plan how to reconstruct them using available information.\n\n3. Apply the following cleaning rules based on the cell type:\n\n   a. Civilit√© (Title):\n      - Normalize to \"M.\", \"Mme\", or \"Autre\"\n      - Use other fields in the row to infer the correct title if necessary\n\n   b. Pr√©nom (First Name):\n      - Capitalize the first letter\n      - Remove extra spaces\n      - Correct obvious spelling errors\n      - If empty, attempt to reconstruct from Nom complet or E-mail\n\n   c. Nom (Last Name):\n      - Capitalize the first letter\n      - Remove extra spaces\n      - Correct obvious spelling errors\n      - If empty, attempt to reconstruct from Nom complet or E-mail\n\n   d. Nom complet (Full Name):\n      - Ensure it matches the combination of Pr√©nom and Nom\n      - Format as \"Pr√©nom Nom\"\n      - If empty, reconstruct from Pr√©nom and Nom, or from E-mail if possible\n\n   e. Fonction (Job Title):\n      - Capitalize the first letter of each word\n      - Standardize common titles (e.g., \"Directeur\" vs \"Dir.\")\n      - Remove unnecessary details or duplications\n\n   f. E-mail:\n      - Ensure it's a valid email format\n      - Correct obvious domain errors (e.g., missing .com or .fr)\n\n   g. Organisation:\n      - Capitalize the first letter of each word\n      - Remove extra spaces\n      - Correct obvious spelling errors\n\n   h. Num√©ro de t√©l√©phone (Phone Number):\n      - Standardize to format: 00 00 00 00 00\n      - Remove any non-digit characters\n      - Ensure it's a valid French phone number (10 digits)\n\n4. Choose the most likely correction based on the context and cleaning rules.\n\n5. Generate a confidence score for your correction (0.0 to 1.0).\n\n6.  output a JSON object with the following structure:\n\n   {\n     \"value\": \"normalized_value\",\n     \"confidence\": 0.0 to 1.0,\n     \"notes\": \"Brief explanation of the correction or standardization\"\n   }\n\n7. Maintain consistency across the dataset, especially for recurring values like organization names or job titles.\n\n8. If multiple interpretations are possible, choose the most likely option based on the context.\n\nOutput your results as a JSON array containing the object we are working on. Here's an example of the structure (with generic content):\n\n[\n  {\n    \"field\": \"Civilit√©\",\n    \"value\": \"normalized_value\",\n    \"confidence\": 0.0,\n    \"notes\": \"Explanation\"\n  }\n\nRemember to use your \u003crow_analysis\u003e section to show your thought process before providing the final JSON output.\n\n`;\n    \n            // Appel API\n            const response = await this.processRow({\n                value: value,\n                type: type,\n                prompt: prompt\n            });\n    \n            // Extraction de la r√©ponse\n            try {\n                const content = response.choices?.[0]?.message?.content;\n                const jsonMatch = content.match(/\\{[^{]*\"value\"\\s*:\\s*\"([^\"]+)\"[^}]*\\}/);\n                return jsonMatch?.[1] || value;\n            } catch (e) {\n                console.error('Erreur extraction value:', e);\n                return value;\n            }\n        } catch (error) {\n            console.error('Erreur traitement cellule:', error);\n            return value;\n        }\n    }\n\n    async validateWithLLM(value, type, prompt) {\n        const response = await this.processRow({\n            value: value,\n            type: type,\n            prompt: prompt\n        });\n\n        try {\n            const content = response.choices?.[0]?.message?.content;\n            const jsonMatch = content.match(/\\{[^{]*\"value\"\\s*:\\s*\"([^\"]+)\"[^}]*\\}/);\n            const cleanedValue = jsonMatch?.[1];\n\n            // Ne jamais retourner les valeurs cod√©es en dur\n            if (['email_valid√©', 't√©l√©phone_valid√©', 'organisation_standardis√©e'].includes(cleanedValue)) {\n                return value;\n            }\n\n            // Pour les valeurs invalides\n            if (cleanedValue === '-' || !cleanedValue) {\n                if (type === 'e-mail' || type === 'num√©ro de t√©l√©phone') {\n                    return '-';\n                }\n                return value;\n            }\n\n            return cleanedValue;\n        } catch (e) {\n            console.error('Erreur validation LLM:', e);\n            // En cas d'erreur, retourner '-' pour email et t√©l√©phone, sinon la valeur originale\n            if (type === 'e-mail' || type === 'num√©ro de t√©l√©phone') {\n                return '-';\n            }\n            return value;\n        }\n    }\n\n    // M√©thode utilitaire pour v√©rifier si une valeur est un email valide\n    isValidEmail(value) {\n        const emailRegex = /^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$/;\n        return emailRegex.test(value);\n    }\n\n    // M√©thode utilitaire pour v√©rifier si une valeur est un t√©l√©phone valide\n    isValidPhone(value) {\n        const phoneRegex = /^(\\d{2}\\s){4}\\d{2}$/;\n        return phoneRegex.test(value);\n    }\n\n    // M√©thode utilitaire pour formater un num√©ro de t√©l√©phone\n    formatPhone(value) {\n        const digits = value.replace(/\\D/g, '');\n        if (digits.length !== 10) return '-';\n        return digits.replace(/(\\d{2})(\\d{2})(\\d{2})(\\d{2})(\\d{2})/, '$1 $2 $3 $4 $5');\n    }\n}\n\n\n// Export de l'instance unique\nwindow.dragonflyAPI = new DragonflyAPI();",
    "size": 11980,
    "modTime": "2024-12-31T12:38:34.597890549+01:00",
    "path": "js/dragonflyAPI.js"
  },
  {
    "name": "security.js",
    "content": "// security.js\nconst SecurityLogger = {\n    log(message) {\n        console.log(`[Security] ${message}`);\n    },\n    \n    warn(message) {\n        console.warn(`[Security] ${message}`);\n    },\n    \n    error(message) {\n        console.error(`[Security] ${message}`);\n    }\n};",
    "size": 273,
    "modTime": "2024-12-30T18:50:52.064709215+01:00",
    "path": "js/security.js"
  },
  {
    "name": "tokenManager.js",
    "content": "// tokenManager.js\nconst TokenManager = {\n    store(bearerToken) {\n        if (!bearerToken) {\n            console.warn('Token vide');\n            return false;\n        }\n        sessionStorage.setItem('bearerToken', bearerToken);\n        return true;\n    },\n\n    get() {\n        return sessionStorage.getItem('bearerToken');\n    },\n\n    clear() {\n        sessionStorage.removeItem('bearerToken');\n    },\n\n    isValid() {\n        return this.get() !== null;\n    }\n};",
    "size": 466,
    "modTime": "2024-12-30T18:50:32.57043089+01:00",
    "path": "js/tokenManager.js"
  }
]