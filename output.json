[
  {
    "name": "style.css",
    "content": "/* Variables globales */\n:root {\n    --primary-color: #2196F3;\n    --background-color: #f5f5f5;\n    --text-color: #333;\n    --border-color: #ddd;\n    --error-color: #f44336;\n    --success-color: #4CAF50;\n}\n\n/* Reset basique */\n* {\n    margin: 0;\n    padding: 0;\n    box-sizing: border-box;\n}\n\n/* Styles de base */\nbody {\n    font-family: Arial, sans-serif;\n    line-height: 1.6;\n    background-color: var(--background-color);\n    color: var(--text-color);\n    padding: 20px;\n}\n\n.container {\n    max-width: 1200px;\n    margin: 0 auto;\n    padding: 20px;\n}\n\nh1 {\n    text-align: center;\n    margin-bottom: 30px;\n    color: var(--primary-color);\n}\n\n/* Zone de drop */\n.drop-zone {\n    background: white;\n    border: 2px dashed var(--primary-color);\n    border-radius: 10px;\n    padding: 40px;\n    text-align: center;\n    cursor: pointer;\n    margin-bottom: 20px;\n    transition: all 0.3s ease;\n}\n\n.drop-zone:hover {\n    background: #f8f9fa;\n    border-color: #1976D2;\n}\n\n.drop-zone.drag-over {\n    background: #e3f2fd;\n    border-color: #1976D2;\n}\n\n/* Zone des actions */\n.actions {\n    margin: 20px 0;\n    text-align: center;\n}\n\n/* Style du bouton */\n.button {\n    background-color: var(--primary-color);\n    color: white;\n    border: none;\n    padding: 12px 24px;\n    border-radius: 5px;\n    cursor: pointer;\n    font-size: 16px;\n    display: inline-flex;\n    align-items: center;\n    gap: 8px;\n    transition: all 0.3s ease;\n}\n\n.button:hover {\n    background-color: #1976D2;\n    transform: translateY(-1px);\n    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.2);\n}\n\n.button:active {\n    transform: translateY(0);\n}\n\n.button:disabled {\n    background-color: #ccc;\n    cursor: not-allowed;\n    transform: none;\n    box-shadow: none;\n}\n\n.button-icon {\n    font-size: 20px;\n}\n\n/* Wrapper pour les tableaux */\n/* Modifier la classe tables-wrapper */\n.tables-wrapper {\n    display: grid;\n    grid-template-columns: 1fr 1fr;\n    /* Garde 2 colonnes √©gales */\n    gap: 10px;\n    /* R√©duit l'espace entre les tableaux */\n    margin-top: 20px;\n    width: 98%;\n    /* Utilise presque toute la largeur */\n    max-width: none;\n    /* Enl√®ve la limite de largeur */\n}\n\n/* Ajuster la largeur des tableaux */\n.table-container {\n    width: 100%;\n    overflow-x: auto;\n}\n\n/* Assurer l'alignement des colonnes entre les tableaux */\ntable th,\ntable td {\n    width: auto;\n    /* Largeur automatique bas√©e sur le contenu */\n    white-space: nowrap;\n    /* Emp√™che le retour √† la ligne */\n    min-width: 100px;\n    /* Largeur minimum pour chaque colonne */\n}\n\n/* Ajuster le container principal */\n.container {\n    width: 98%;\n    /* Utilise presque toute la largeur de l'√©cran */\n    max-width: none;\n    margin: 0 auto;\n    padding: 10px;\n}\n\n/* Style du tableau */\ntable {\n    width: 100%;\n    border-collapse: collapse;\n    background: white;\n    box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);\n}\n\nth {\n    background-color: var(--primary-color);\n    color: white;\n    padding: 12px;\n    text-align: left;\n    white-space: nowrap;\n}\n\ntd {\n    padding: 12px;\n    border: 1px solid var(--border-color);\n    text-align: left;\n}\n\ntr:nth-child(even) {\n    background-color: #f8f9fa;\n}\n\n/* Cellules modifi√©es */\n.cell-modified {\n    background-color: #e8f5e9;\n    border-left: 3px solid #4CAF50;\n}\n\n/* Adaptation responsive */\n@media (max-width: 768px) {\n    .tables-wrapper {\n        grid-template-columns: 1fr;\n    }\n}\n\n/* styles token */\n.token-section {\n    margin: 20px auto;\n    max-width: 600px;\n    padding: 15px;\n    background: #ffffff;\n    border-radius: 8px;\n    box-shadow: 0 2px 4px rgba(0,0,0,0.1);\n}\n\n.token-container {\n    display: flex;\n    align-items: center;\n    background: #f8f9fa;\n    border: 2px solid #e9ecef;\n    border-radius: 6px;\n    padding: 8px 12px;\n    transition: all 0.3s ease;\n}\n\n.token-container:focus-within {\n    border-color: var(--primary-color);\n    box-shadow: 0 0 0 3px rgba(33, 150, 243, 0.1);\n}\n\n.token-icon {\n    font-size: 18px;\n    margin-right: 10px;\n    color: #6c757d;\n}\n\n.token-input {\n    flex: 1;\n    border: none;\n    background: transparent;\n    padding: 8px 0;\n    font-size: 14px;\n    color: #495057;\n    font-family: 'Courier New', monospace;\n}\n\n.token-input:focus {\n    outline: none;\n}\n\n.token-input::placeholder {\n    color: #adb5bd;\n}\n\n.token-clear {\n    background: none;\n    border: none;\n    color: #adb5bd;\n    cursor: pointer;\n    font-size: 16px;\n    padding: 4px 8px;\n    transition: color 0.3s ease;\n}\n\n.token-clear:hover {\n    color: #dc3545;\n}\n\n.token-status {\n    margin-top: 8px;\n    font-size: 13px;\n    text-align: center;\n    transition: all 0.3s ease;\n}\n\n.token-status.success {\n    color: #28a745;\n}\n\n.token-status.error {\n    color: #dc3545;\n}",
    "size": 4692,
    "modTime": "2024-12-30T18:56:12.437769487+01:00",
    "path": "css/style.css"
  },
  {
    "name": "index.html",
    "content": "\u003c!DOCTYPE html\u003e\n\u003chtml lang=\"fr\"\u003e\n\n\u003chead\u003e\n    \u003cmeta charset=\"UTF-8\"\u003e\n    \u003cmeta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"\u003e\n    \u003ctitle\u003eCSV Cleaner\u003c/title\u003e\n    \u003clink rel=\"stylesheet\" href=\"css/style.css\"\u003e\n\u003c/head\u003e\n\n\u003cbody\u003e\n    \u003cdiv class=\"container\"\u003e\n        \u003ch1\u003eCSV Cleaner\u003c/h1\u003e\n\n        \u003c!-- Ajouter la section token ici, avant la drop zone --\u003e\n        \u003c!-- Section Token --\u003e\n        \u003c!-- Section Token --\u003e\n        \u003cdiv class=\"token-section\"\u003e\n            \u003cdiv class=\"token-container\"\u003e\n                \u003cdiv class=\"token-icon\"\u003eüîë\u003c/div\u003e\n                \u003cinput type=\"password\" id=\"bearerToken\" placeholder=\"Collez votre Bearer Token ici\" class=\"token-input\"\n                    autocomplete=\"off\" /\u003e\n                \u003cbutton id=\"clearToken\" class=\"token-clear\" title=\"Effacer\"\u003e‚úï\u003c/button\u003e\n            \u003c/div\u003e\n            \u003cdiv id=\"tokenStatus\" class=\"token-status\"\u003e\u003c/div\u003e\n        \u003c/div\u003e\n    \u003c/div\u003e\n\n    \u003cdiv class=\"drop-zone\" id=\"dropZone\"\u003e\n        \u003cp\u003eGlissez votre fichier CSV ici\u003c/p\u003e\n        \u003cinput type=\"file\" id=\"fileInput\" accept=\".csv\" hidden\u003e\n    \u003c/div\u003e\n\n    \u003cdiv class=\"actions\"\u003e\n        \u003cbutton id=\"cleanButton\" class=\"button\" disabled\u003e\n            \u003cspan class=\"button-icon\"\u003eüßπ\u003c/span\u003e\n            Nettoyer les donn√©es\n        \u003c/button\u003e\n    \u003c/div\u003e\n\n    \u003cdiv class=\"tables-wrapper\"\u003e\n        \u003cdiv class=\"table-container\"\u003e\n            \u003ctable id=\"previewTable\"\u003e\u003c/table\u003e\n        \u003c/div\u003e\n        \u003cdiv class=\"table-container\"\u003e\n            \u003ctable id=\"resultTable\"\u003e\u003c/table\u003e\n        \u003c/div\u003e\n    \u003c/div\u003e\n    \u003c/div\u003e\n\n    \u003c!-- Charger les scripts dans le bon ordre --\u003e\n    \u003cscript src=\"js/tokenManager.js\"\u003e\u003c/script\u003e\n    \u003cscript src=\"js/security.js\"\u003e\u003c/script\u003e\n    \u003cscript src=\"js/app.js\"\u003e\u003c/script\u003e\n\u003c/body\u003e\n\n\u003c/html\u003e",
    "size": 1722,
    "modTime": "2024-12-30T19:01:30.873556069+01:00",
    "path": "index.html"
  },
  {
    "name": "app.js",
    "content": "// Configuration du mode debug\nconst DEBUG = true; // √Ä mettre √† false en production\nconst VALID_MIME_TYPES = ['text/csv', 'application/vnd.ms-excel'];\nconst MAX_FILE_SIZE = 5 * 1024 * 1024; // 5MB en bytes\nconst ERROR_MESSAGES = {\n    invalidType: 'Format de fichier invalide. Veuillez s√©lectionner un fichier CSV.',\n    tooLarge: 'Fichier trop volumineux. La taille maximum est de 5MB.',\n    noFile: 'Aucun fichier s√©lectionn√©.',\n    parseError: 'Erreur lors de la lecture du fichier CSV.'\n};\n\n// √âtat de l'application\nconst state = {\n    currentFile: null,\n    originalData: null,\n    cleanedData: null\n};\n\n// Initialisation\ndocument.addEventListener('DOMContentLoaded', () =\u003e {\n    SecurityLogger.log('Application initialis√©e');\n    initializeDropZone();\n    initializeCleanButton();\n});\n\n// Initialisation de la zone de drop\nfunction initializeDropZone() {\n    const dropZone = document.getElementById('dropZone');\n    const fileInput = document.getElementById('fileInput');\n\n    // Gestion du clic sur la zone\n    dropZone.addEventListener('click', () =\u003e fileInput.click());\n\n    // Gestion du drag \u0026 drop\n    dropZone.addEventListener('dragover', (e) =\u003e {\n        e.preventDefault();\n        dropZone.classList.add('drag-over');\n    });\n\n    dropZone.addEventListener('dragleave', () =\u003e {\n        dropZone.classList.remove('drag-over');\n    });\n\n    dropZone.addEventListener('drop', (e) =\u003e {\n        e.preventDefault();\n        dropZone.classList.remove('drag-over');\n        \n        const file = e.dataTransfer.files[0];\n        if (file) handleFile(file);\n    });\n\n    // Gestion de la s√©lection de fichier\n    fileInput.addEventListener('change', (e) =\u003e {\n        const file = e.target.files[0];\n        if (file) handleFile(file);\n    });\n}\n\n// Initialisation du bouton de nettoyage\nfunction initializeCleanButton() {\n    const cleanButton = document.getElementById('cleanButton');\n    cleanButton.addEventListener('click', handleCleanData);\n    cleanButton.disabled = true; // D√©sactiv√© par d√©faut\n}\n\n// Gestion s√©curis√©e du fichier\nfunction handleFile(file) {\n    // Logging de s√©curit√©\n    SecurityLogger.log('Tentative de chargement de fichier', { \n        name: file.name, \n        size: file.size, \n        type: file.type \n    });\n\n    // Validation du fichier\n    try {\n        if (!file) {\n            throw new Error(ERROR_MESSAGES.noFile);\n        }\n\n        if (file.size \u003e MAX_FILE_SIZE) {\n            throw new Error(ERROR_MESSAGES.tooLarge);\n        }\n\n        if (!VALID_MIME_TYPES.includes(file.type) \u0026\u0026 !file.name.endsWith('.csv')) {\n            throw new Error(ERROR_MESSAGES.invalidType);\n        }\n\n        const reader = new FileReader();\n        reader.onload = (e) =\u003e {\n            try {\n                SecurityLogger.log('Lecture du fichier r√©ussie');\n                parseCSV(sanitizeContent(e.target.result));\n            } catch (error) {\n                SecurityLogger.error('Erreur parsing CSV', error);\n                showError(ERROR_MESSAGES.parseError);\n            }\n        };\n\n        reader.onerror = (error) =\u003e {\n            SecurityLogger.error('Erreur lecture fichier', error);\n            showError(ERROR_MESSAGES.parseError);\n        };\n\n        reader.readAsText(file, 'UTF-8');\n\n    } catch (error) {\n        SecurityLogger.error('Erreur validation fichier', error);\n        showError(error.message);\n    }\n}\n\n\n// Fonction s√©curis√©e de parsing CSV\nfunction parseCSV(content) {\n    try {\n        // Sanitize le contenu avant parsing\n        content = sanitizeContent(content);\n        \n        // Divise le contenu en lignes\n        const lines = content.split('\\n');\n        if (lines.length === 0) {\n            SecurityLogger.error('Fichier CSV vide');\n            return;\n        }\n\n        // D√©tecte le s√©parateur (virgule ou point-virgule)\n        const separator = lines[0].includes(';') ? ';' : ',';\n\n        // Parse les donn√©es\n        const headers = lines[0].split(separator);\n        const rows = lines.slice(1)\n            .filter(line =\u003e line.trim() !== '')\n            .map(line =\u003e line.split(separator));\n\n        // V√©rifie la coh√©rence des donn√©es\n        if (!validateCSVStructure(headers, rows)) {\n            SecurityLogger.error('Structure CSV invalide');\n            alert('Le fichier CSV semble mal format√©');\n            return;\n        }\n\n        // Stocke les donn√©es originales\n        state.originalData = {\n            headers: headers,\n            rows: rows\n        };\n\n        SecurityLogger.log('Parsing CSV r√©ussi', { \n            rowCount: rows.length,\n            headerCount: headers.length \n        });\n\n        // Active le bouton de nettoyage\n        document.getElementById('cleanButton').disabled = false;\n\n        // Affiche les donn√©es\n        displayPreview(headers, rows);\n    } catch (error) {\n        SecurityLogger.error('Erreur lors du parsing CSV', error);\n        alert('Erreur lors de la lecture du fichier CSV');\n    }\n}\n\n// Nouvelle fonction de sanitization\nfunction sanitizeContent(content) {\n    return content\n        .replace(/[\u003c\u003e]/g, '') // Anti-XSS basique\n        .replace(/[\\x00-\\x08\\x0B\\x0C\\x0E-\\x1F\\x7F-\\x9F]/g, '') // Supprime les caract√®res de contr√¥le\n        .trim();\n}\n\n\n// Nouvelle fonction de validation\nfunction validateCSVStructure(headers, rows) {\n    if (!headers.length) return false;\n    const headerCount = headers.length;\n    return rows.every(row =\u003e row.length === headerCount);\n}\n\n// Le reste de votre code reste inchang√©...\nfunction displayPreview(headers, rows) {\n    const table = document.getElementById('previewTable');\n    table.innerHTML = '';\n\n    // Cr√©e l'en-t√™te\n    const thead = document.createElement('thead');\n    const headerRow = document.createElement('tr');\n    headers.forEach(header =\u003e {\n        const th = document.createElement('th');\n        th.textContent = sanitizeCell(header.trim() || '-');\n        headerRow.appendChild(th);\n    });\n    thead.appendChild(headerRow);\n    table.appendChild(thead);\n\n    // Cr√©e le corps du tableau\n    const tbody = document.createElement('tbody');\n    rows.forEach(row =\u003e {\n        const tr = document.createElement('tr');\n        row.forEach(cell =\u003e {\n            const td = document.createElement('td');\n            td.textContent = sanitizeCell(cell.trim() || '-');\n            tr.appendChild(td);\n        });\n        tbody.appendChild(tr);\n    });\n    table.appendChild(tbody);\n}\n\n// Nouvelle fonction de sanitization des cellules\nfunction sanitizeCell(value) {\n    return value\n        .replace(/[\u003c\u003e]/g, '')\n        .trim();\n}\n\n// Le reste des fonctions de nettoyage...\nfunction handleCleanData() {\n    if (!state.originalData) {\n        SecurityLogger.warn('Tentative de nettoyage sans donn√©es');\n        return;\n    }\n\n    try {\n        // Clone les donn√©es pour le nettoyage\n        const cleanedRows = state.originalData.rows.map(row =\u003e {\n            return row.map((cell, columnIndex) =\u003e {\n                // Nettoyage avec contexte de la colonne\n                return cleanCell(cell, columnIndex, state.originalData.headers);\n            });\n        });\n\n        // Stocke les donn√©es nettoy√©es\n        state.cleanedData = {\n            headers: state.originalData.headers,\n            rows: cleanedRows\n        };\n\n        SecurityLogger.log('Nettoyage des donn√©es r√©ussi', {\n            rowCount: cleanedRows.length\n        });\n\n        // Affiche les r√©sultats\n        displayCleanedData(state.cleanedData.headers, state.cleanedData.rows);\n    } catch (error) {\n        SecurityLogger.error('Erreur lors du nettoyage', error);\n        alert('Une erreur est survenue lors du nettoyage des donn√©es');\n    }\n}\n\n// Fonction de nettoyage d'une cellule\nfunction cleanCell(cell, columnIndex, headers) {\n    if (!cell) return '-';\n    \n    const columnName = headers[columnIndex].trim().toLowerCase();\n    let cleaned = cell.trim();\n\n    switch(columnName) {\n        case 'civilit√©':\n            cleaned = normalizeCivility(cleaned);\n            break;\n        case 'pr√©nom':\n        case 'nom':\n            cleaned = normalizeNameCase(cleaned);\n            break;\n        case 'e-mail':\n            cleaned = cleanEmail(cleaned);\n            break;\n        case 'num√©ro de t√©l√©phone':\n            cleaned = formatPhoneNumber(cleaned);\n            break;\n        case 'fonction':\n            cleaned = cleanFunction(cleaned);\n            break;\n    }\n\n    return cleaned;\n}\n\nfunction normalizeCivility(value) {\n    value = value.toLowerCase().trim();\n    if (value.includes('m.') || value.includes('mr') || value.includes('monsieur')) return 'Monsieur';\n    if (value.includes('mme') || value.includes('madame')) return 'Madame';\n    return value;\n}\n\nfunction normalizeNameCase(value) {\n    return value.replace(/\\s+/g, ' ')\n                .trim()\n                .split(' ')\n                .map(word =\u003e word.charAt(0).toUpperCase() + word.slice(1).toLowerCase())\n                .join(' ');\n}\n\nfunction cleanEmail(value) {\n    if (!value.includes('@') || !value.includes('.')) return '-';\n    return value.toLowerCase().trim().replace(/\\s+/g, '');\n}\n\nfunction formatPhoneNumber(value) {\n    // Garde uniquement les chiffres\n    let numbers = value.replace(/\\D/g, '');\n    if (numbers.length !== 10) return value;\n    \n    // Format XX XX XX XX XX\n    return numbers.replace(/(\\d{2})(\\d{2})(\\d{2})(\\d{2})(\\d{2})/, '$1 $2 $3 $4 $5');\n}\n\nfunction cleanFunction(value) {\n    return value\n        .replace(/\\s+/g, ' ')\n        .replace(/\\/.*$/, '') // Supprime tout apr√®s un /\n        .replace(/\\(.*\\)/, '') // Supprime les parenth√®ses et leur contenu\n        .trim();\n}\n\n// Affiche les donn√©es nettoy√©es\nfunction displayCleanedData(headers, rows) {\n    const resultTable = document.getElementById('resultTable');\n    resultTable.innerHTML = '';\n\n    // Cr√©e l'en-t√™te\n    const thead = document.createElement('thead');\n    const headerRow = document.createElement('tr');\n    headers.forEach(header =\u003e {\n        const th = document.createElement('th');\n        th.textContent = header.trim() || '-';\n        headerRow.appendChild(th);\n    });\n    thead.appendChild(headerRow);\n    resultTable.appendChild(thead);\n\n    // Cr√©e le corps du tableau\n    const tbody = document.createElement('tbody');\n    rows.forEach((row, rowIndex) =\u003e {\n        const tr = document.createElement('tr');\n        row.forEach((cell, cellIndex) =\u003e {\n            const td = document.createElement('td');\n            const originalCell = state.originalData.rows[rowIndex][cellIndex];\n            td.textContent = cell || '-';\n            \n            if (cell !== originalCell) {\n                td.classList.add('cell-modified');\n                td.title = `Original: \"${originalCell}\"`;\n            }\n            \n            tr.appendChild(td);\n        });\n        tbody.appendChild(tr);\n    });\n    resultTable.appendChild(tbody);\n}\n\nfunction showError(message) {\n    // Vous pouvez adapter l'affichage selon votre interface\n    alert(message);\n}\n\nfunction initializeTokenInput() {\n    const tokenInput = document.getElementById('bearerToken');\n    const tokenStatus = document.getElementById('tokenStatus');\n    const clearButton = document.getElementById('clearToken');\n\n    // G√©rer la saisie du token\n    tokenInput.addEventListener('change', (e) =\u003e {\n        const token = e.target.value.trim();\n        if (TokenManager.store(token)) {\n            tokenStatus.textContent = 'Bearer Token enregistr√© ‚úì';\n            tokenStatus.className = 'token-status success';\n            SecurityLogger.log('Token enregistr√© avec succ√®s');\n        } else {\n            tokenStatus.textContent = 'Token invalide ‚úó';\n            tokenStatus.className = 'token-status error';\n            SecurityLogger.warn('Token invalide');\n        }\n    });\n\n    // G√©rer le bouton d'effacement\n    clearButton.addEventListener('click', () =\u003e {\n        tokenInput.value = '';\n        TokenManager.clear();\n        tokenStatus.textContent = 'Token effac√©';\n        tokenStatus.className = 'token-status';\n        SecurityLogger.log('Token effac√©');\n    });\n\n    // Restaurer le token s'il existe\n    const savedToken = TokenManager.get();\n    if (savedToken) {\n        tokenInput.value = savedToken;\n        tokenStatus.textContent = 'Bearer Token restaur√© ‚úì';\n        tokenStatus.className = 'token-status success';\n    }\n}\n\n// Ajouter l'appel dans le DOMContentLoaded\n// app.js\ndocument.addEventListener('DOMContentLoaded', () =\u003e {\n    // V√©rifions que tous les √©l√©ments existent avant d'initialiser\n    const tokenInput = document.getElementById('bearerToken');\n    const tokenStatus = document.getElementById('tokenStatus');\n    const clearButton = document.getElementById('clearToken');\n    \n    if (!tokenInput || !tokenStatus || !clearButton) {\n        console.error('√âl√©ments du token non trouv√©s dans le DOM');\n        return;\n    }\n\n    // Fonction d'initialisation du token\n    function initializeTokenInput() {\n        // G√©rer la saisie du token\n        tokenInput.addEventListener('change', (e) =\u003e {\n            const token = e.target.value.trim();\n            if (TokenManager.store(token)) {\n                tokenStatus.textContent = 'Bearer Token enregistr√© ‚úì';\n                tokenStatus.className = 'token-status success';\n                SecurityLogger.log('Token enregistr√© avec succ√®s');\n            } else {\n                tokenStatus.textContent = 'Token invalide ‚úó';\n                tokenStatus.className = 'token-status error';\n                SecurityLogger.warn('Token invalide');\n            }\n        });\n\n        // G√©rer le bouton d'effacement\n        clearButton.addEventListener('click', () =\u003e {\n            tokenInput.value = '';\n            TokenManager.clear();\n            tokenStatus.textContent = 'Token effac√©';\n            tokenStatus.className = 'token-status';\n            SecurityLogger.log('Token effac√©');\n        });\n\n        // Restaurer le token s'il existe\n        const savedToken = TokenManager.get();\n        if (savedToken) {\n            tokenInput.value = savedToken;\n            tokenStatus.textContent = 'Bearer Token restaur√© ‚úì';\n            tokenStatus.className = 'token-status success';\n        }\n    }\n\n    // Initialiser dans cet ordre\n    initializeTokenInput();\n    initializeDropZone();\n    initializeCleanButton();\n});",
    "size": 14341,
    "modTime": "2024-12-30T18:59:08.420549384+01:00",
    "path": "js/app.js"
  },
  {
    "name": "security.js",
    "content": "// security.js\nconst SecurityLogger = {\n    log(message) {\n        console.log(`[Security] ${message}`);\n    },\n    \n    warn(message) {\n        console.warn(`[Security] ${message}`);\n    },\n    \n    error(message) {\n        console.error(`[Security] ${message}`);\n    }\n};",
    "size": 273,
    "modTime": "2024-12-30T18:50:52.064709215+01:00",
    "path": "js/security.js"
  },
  {
    "name": "tokenManager.js",
    "content": "// tokenManager.js\nconst TokenManager = {\n    store(bearerToken) {\n        if (!bearerToken) {\n            console.warn('Token vide');\n            return false;\n        }\n        sessionStorage.setItem('bearerToken', bearerToken);\n        return true;\n    },\n\n    get() {\n        return sessionStorage.getItem('bearerToken');\n    },\n\n    clear() {\n        sessionStorage.removeItem('bearerToken');\n    },\n\n    isValid() {\n        return this.get() !== null;\n    }\n};",
    "size": 466,
    "modTime": "2024-12-30T18:50:32.57043089+01:00",
    "path": "js/tokenManager.js"
  }
]